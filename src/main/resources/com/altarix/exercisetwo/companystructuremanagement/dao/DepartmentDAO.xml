<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.altarix.exercisetwo.companystructuremanagement.dao.DepartmentDAO">


    <sql id="baseParam">
        d.name,
        d.creation_date,
        ( select count (e.id) from employees e where e.department_id = #{id}) as number_of_employees,
        e.last_name || ' ' ||e.first_name|| ' '|| e.patronymic as chief_of_department
    </sql>

    <sql id="baseJoin">
        from departments d
        join employees e ON d.id = e.department_id
    </sql>

    <insert id="add" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO departments (name, creation_date, chief_id, parent_id)
        VALUES (#{name}, #{creationDate}, NULL, #{parentId});
    </insert>

    <update id="appointChiefToDepartment">
        UPDATE departments
        SET chief_id = #{chiefId}
        WHERE id = #{id}
    </update>

    <update id="appointChiefToEmployees">
        UPDATE employees
        SET is_chief = TRUE
        WHERE id = #{chiefId}
    </update>

    <update id="update">
        UPDATE departments
        SET
            name = #{name}
        WHERE id = #{id}
    </update>

    <update id="swapDepartment">
        UPDATE departments
        SET parent_id = #{idPointer}
        WHERE id = #{idSwapped} AND parent_id IS NOT NULL
    </update>

    <select id="getDepartmentIdForEmployee" resultType="Integer">
        SELECT e.department_id
        FROM employees e
        WHERE e.id = #{employeeId}
    </select>

    <select id="checkEmployeesOfDepartment" resultType="Boolean">
        SELECT exists(SELECT 1
                      FROM employees e
                      WHERE e.department_id = #{departmentId} AND e.is_chief = TRUE);
    </select>

    <select id="checkExistenceDateOfDismissal" resultType="Boolean">
        SELECT exists(SELECT e.date_of_dismissal
                      FROM employees e
                      WHERE e.id = #{employeeId} AND e.date_of_dismissal NOTNULL);
    </select>

    <select id="checkingDepartmentName" resultType="Boolean">
        SELECT exists(SELECT 1
                      FROM departments
                      WHERE name = #{name})
    </select>

    <select id="getDepartmentByIdWithoutChief" resultMap="departmentWithoutChiefMap">
        SELECT
            d.name,
            d.creation_date,
            (SELECT count(e.id)
             FROM employees e
             WHERE e.department_id = #{id}) AS number_of_employees
        FROM departments d
        WHERE d.id = #{id}
    </select>

    <select id="checkExistenceDepartmentChief" resultType="Boolean">
        SELECT exists(SELECT 1
                      FROM departments d
                      WHERE d.id = #{id} AND d.chief_id NOTNULL)
    </select>

    <select id="getDepartmentById" resultMap="departmentMap">
        SELECT
        <include refid="baseParam"/>
        <include refid="baseJoin"/>
        where e.department_id = #{id} and e.is_chief = TRUE
    </select>

    <select id="checkExistenceEmployeeInDepartment" resultType="Boolean">
        SELECT exists(SELECT e.id
                      FROM employees e
                      WHERE e.department_id = #{id} AND e.date_of_dismissal IS NULL)
    </select>

    <select id="checkExistenceDepartment" resultType="Boolean">
        SELECT exists(SELECT d.id
                      FROM departments d
                      WHERE d.id = #{id})
    </select>

    <select id="getDepartmentChildren" resultMap="departmentSimpleMap">
        SELECT
            d.name,
            d.creation_date
        FROM departments d
        WHERE d.parent_id = #{id}
    </select>

    <select id="getAllDepartmentChildren" resultMap="departmentSimpleMap">
        WITH RECURSIVE dep AS (
        SELECT
        d.id,
        d.name,
        d.creation_date,
        d.parent_id
        FROM departments d
        WHERE d.parent_id = #{id}

        UNION

        SELECT
        de.id,
        de.name,
        de.creation_date,
        de.parent_id
        FROM departments de
        JOIN dep ON de.parent_id = dep.id
        )
        SELECT
            dep.name,
            dep.creation_date
        FROM dep;
    </select>

    <select id="getAllDepartmentParents" resultMap="departmentSimpleMap">
        WITH RECURSIVE dep AS (
        SELECT
        d.id,
        d.name,
        d.creation_date,
        d.parent_id
        FROM departments d
        WHERE d.id = #{id}

        UNION

        SELECT
        de.id,
        de.name,
        de.creation_date,
        de.parent_id
        FROM departments de
        JOIN dep ON de.id = dep.parent_id
        )
        SELECT
            dep.name,
            dep.creation_date
        FROM dep
        ORDER BY id;
    </select>

    <select id="searchDepartmentByName" resultMap="departmentSimpleMap">
        SELECT
            d.name,
            d.creation_date
        FROM departments d
        WHERE d.name LIKE #{name}
    </select>

    <select id="getFundOfSalary" resultType="Double">
        SELECT sum(e.salary) AS fund_of_salary
        FROM employees e
        GROUP BY e.department_id, e.date_of_dismissal
        HAVING e.department_id = #{id} AND e.date_of_dismissal IS NULL
    </select>

    <delete id="delete">
        DELETE FROM departments
        WHERE id = #{id}
    </delete>

    <resultMap id="departmentMap" type="Department">
        <result property="name" column="name"/>
        <result property="creationDate" column="creation_date"/>
        <result property="numberOfEmployees" column="number_of_employees"/>
        <result property="chief" column="chief_of_department"/>
    </resultMap>

    <resultMap id="departmentWithoutChiefMap" type="Department">
        <result property="name" column="name"/>
        <result property="creationDate" column="creation_date"/>
        <result property="numberOfEmployees" column="number_of_employees"/>
    </resultMap>

    <resultMap id="departmentSimpleMap" type="Department">
        <result property="name" column="name"/>
        <result property="creationDate" column="creation_date"/>
    </resultMap>

</mapper>